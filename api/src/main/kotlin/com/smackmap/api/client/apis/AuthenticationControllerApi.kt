/**
 * Smackmap API
 *
 * Smackmap API
 *
 * The version of the OpenAPI document: v0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.smackmap.api.client.apis

import com.smackmap.api.client.infrastructure.ClientException
import com.smackmap.api.client.infrastructure.ServerException
import com.smackmap.api.client.models.LoginSmackerRequest
import org.openapitools.client.models.ContinuationObject
import org.openapitools.client.models.CreateSmackerRequest
import org.openapitools.client.models.LoginSmackerRequest
import org.openapitools.client.models.SmackerDto
import org.openapitools.client.models.SmackerRelationsDto

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success

class AuthenticationControllerApi(basePath: kotlin.String = com.smackmap.api.client.apis.AuthenticationControllerApi.Companion.defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty("org.openapitools.client.baseUrl", "http://192.168.0.58:8090")
        }
    }

    /**
    * 
    * 
    * @param loginSmackerRequest  
    * @param dollarCompletion  (optional)
    * @return SmackerRelationsDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun login(loginSmackerRequest: LoginSmackerRequest, dollarCompletion: ContinuationObject?) : SmackerRelationsDto {
        val localVariableConfig = loginRequestConfig(loginSmackerRequest = loginSmackerRequest, dollarCompletion = dollarCompletion)

        val localVarResponse = request<LoginSmackerRequest, SmackerRelationsDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SmackerRelationsDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation login
    *
    * @param loginSmackerRequest  
    * @param dollarCompletion  (optional)
    * @return RequestConfig
    */
    fun loginRequestConfig(loginSmackerRequest: LoginSmackerRequest, dollarCompletion: ContinuationObject?) : RequestConfig<LoginSmackerRequest> {
        val localVariableBody = loginSmackerRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (dollarCompletion != null) {
                    put("$completion", listOf(dollarCompletion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/authentication/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param createSmackerRequest  
    * @param dollarCompletion  (optional)
    * @return SmackerDto
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun register(createSmackerRequest: CreateSmackerRequest, dollarCompletion: ContinuationObject?) : SmackerDto {
        val localVariableConfig = registerRequestConfig(createSmackerRequest = createSmackerRequest, dollarCompletion = dollarCompletion)

        val localVarResponse = request<CreateSmackerRequest, SmackerDto>(
            localVariableConfig
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SmackerDto
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * To obtain the request config of the operation register
    *
    * @param createSmackerRequest  
    * @param dollarCompletion  (optional)
    * @return RequestConfig
    */
    fun registerRequestConfig(createSmackerRequest: CreateSmackerRequest, dollarCompletion: ContinuationObject?) : RequestConfig<CreateSmackerRequest> {
        val localVariableBody = createSmackerRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, List<kotlin.String>>()
            .apply {
                if (dollarCompletion != null) {
                    put("$completion", listOf(dollarCompletion.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/authentication/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
